
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 06 10:27:09 EST 2017
//----------------------------------------------------

package fractal.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fractal.values.FractalValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 06 10:27:09 EST 2017
  */
public class FractalParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FractalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\006\010\000\002\004\005" +
    "\000\002\004\003\000\002\004\012\000\002\004\007\000" +
    "\002\004\007\000\002\004\012\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\012\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\003\000\002" +
    "\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\036\005\022\006\013\007\017\010\005\011" +
    "\011\013\021\037\016\040\012\041\014\042\025\043\006" +
    "\044\007\045\004\046\015\001\002\000\042\002\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\001\002\000\042\002\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\001\002\000\042\002\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\001\002\000" +
    "\042\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\001\002\000\004\002\114" +
    "\001\002\000\042\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\001\002\000" +
    "\012\014\033\047\035\050\031\051\026\001\002\000\006" +
    "\014\076\017\075\001\002\000\012\014\033\047\035\050" +
    "\031\051\026\001\002\000\042\002\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\001\002\000\012\014\033\047\035\050\031\051\026\001" +
    "\002\000\004\051\063\001\002\000\042\002\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\001\002\000\012\014\033\047\035\050\031\051" +
    "\026\001\002\000\004\017\053\001\002\000\042\002\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\001\002\000\040\002\001\005\022\006" +
    "\013\007\017\010\005\011\011\013\021\037\016\040\012" +
    "\041\014\042\025\043\006\044\007\045\004\046\015\001" +
    "\002\000\012\014\033\047\035\050\031\051\026\001\002" +
    "\000\062\002\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\015\uffdf\020\uffdf\021\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002" +
    "\000\060\002\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\015\uffe1\021\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\060" +
    "\002\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\015\uffe5\021\uffe5\024\uffe5\025\uffe5\026\042" +
    "\027\043\030\041\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\001\002\000\062\002\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\015\uffdc\020\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\001\002\000\062\002\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\015\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\001\002\000\012\014\033" +
    "\047\035\050\031\051\026\001\002\000\046\002\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\024\036\025\037\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\001\002\000\062\002\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\015\uffdd\020\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\001\002\000\012\014\033" +
    "\047\035\050\031\051\026\001\002\000\012\014\033\047" +
    "\035\050\031\051\026\001\002\000\060\002\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\021\uffe6\024\uffe6\025\uffe6\026\042\027\043\030\041" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\001\002\000\012\014\033\047\035\050\031" +
    "\051\026\001\002\000\012\014\033\047\035\050\031\051" +
    "\026\001\002\000\012\014\033\047\035\050\031\051\026" +
    "\001\002\000\060\002\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\021\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\001\002" +
    "\000\060\002\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\021\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\001\002\000\060" +
    "\002\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\015\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\060\002\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\015\uffe7\021\uffe7\024\uffe7\025\uffe7\026\042\027\043" +
    "\030\041\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\001\002\000\010\015\051\024\036" +
    "\025\037\001\002\000\062\002\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015\uffde\020\uffde" +
    "\021\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\001\002\000\042\002\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\001" +
    "\002\000\004\051\054\001\002\000\004\020\055\001\002" +
    "\000\012\014\033\047\035\050\031\051\026\001\002\000" +
    "\010\021\057\024\036\025\037\001\002\000\036\005\022" +
    "\006\013\007\017\010\005\011\011\013\021\037\016\040" +
    "\012\041\014\042\025\043\006\044\007\045\004\046\015" +
    "\001\002\000\040\005\022\006\013\007\017\010\005\011" +
    "\011\012\061\013\021\037\016\040\012\041\014\042\025" +
    "\043\006\044\007\045\004\046\015\001\002\000\042\002" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\001\002\000\046\002\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\024" +
    "\036\025\037\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\001\002\000\004\004\064\001" +
    "\002\000\004\014\066\001\002\000\042\002\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\001\002\000\006\047\035\050\031\001\002\000" +
    "\004\015\070\001\002\000\036\005\022\006\013\007\017" +
    "\010\005\011\011\013\021\037\016\040\012\041\014\042" +
    "\025\043\006\044\007\045\004\046\015\001\002\000\040" +
    "\005\022\006\013\007\017\010\005\011\011\012\072\013" +
    "\021\037\016\040\012\041\014\042\025\043\006\044\007" +
    "\045\004\046\015\001\002\000\042\002\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\001\002\000\046\002\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\024\036\025\037\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\001\002\000\046\002\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\024\036\025\037" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\001\002\000\012\014\033\047\035\050\031" +
    "\051\026\001\002\000\012\014\033\047\035\050\031\051" +
    "\026\001\002\000\004\015\100\001\002\000\006\004\064" +
    "\051\101\001\002\000\042\002\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\001" +
    "\002\000\042\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002\000\042" +
    "\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\001\002\000\004\020\105\001" +
    "\002\000\004\014\106\001\002\000\012\014\033\047\035" +
    "\050\031\051\026\001\002\000\004\015\110\001\002\000" +
    "\006\004\064\051\101\001\002\000\042\002\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\001\002\000\042\002\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\001" +
    "\002\000\046\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\024\036\025\037\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\012\002\007\003\023\004\022\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\112\013\027\014\026\015\031\001\001\000\002" +
    "\001\001\000\012\012\073\013\027\014\026\015\031\001" +
    "\001\000\002\001\001\000\012\012\072\013\027\014\026" +
    "\015\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\061\013\027\014\026\015\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\051\005\017\001" +
    "\001\000\012\012\033\013\027\014\026\015\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\047\013\027" +
    "\014\026\015\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\046\014\026\015\031\001\001\000\010" +
    "\013\037\014\026\015\031\001\001\000\002\001\001\000" +
    "\006\014\045\015\031\001\001\000\006\014\044\015\031" +
    "\001\001\000\006\014\043\015\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\055\013\027" +
    "\014\026\015\031\001\001\000\002\001\001\000\010\003" +
    "\057\004\022\005\017\001\001\000\006\004\051\005\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\066\001\001\000\002\001\001\000\010\003\070\004" +
    "\022\005\017\001\001\000\006\004\051\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\103\015\031\001\001\000\006\014\076\015\031" +
    "\001\001\000\002\001\001\000\006\006\101\010\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\106\015" +
    "\031\001\001\000\002\001\001\000\006\006\110\010\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FractalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FractalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FractalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		FractalLexer lexer;

		public FractalParser(FractalLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Encountered token " + cur_token +
					": " + lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FractalParser$actions {
  private final FractalParser parser;

  /** Constructor */
  CUP$FractalParser$actions(FractalParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FractalParser$do_action(
    int                        CUP$FractalParser$act_num,
    java_cup.runtime.lr_parser CUP$FractalParser$parser,
    java.util.Stack            CUP$FractalParser$stack,
    int                        CUP$FractalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FractalParser$result;

      /* select the action based on the action number */
      switch (CUP$FractalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // empty ::= 
            {
              Object RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("empty",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // number ::= REAL 
            {
              FractalValue RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = FractalValue.make(r); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // number ::= INT 
            {
              FractalValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = FractalValue.make(i); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= LPAREN expression RPAREN 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = e; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= ID 
            {
              ASTExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpVar(v); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= number 
            {
              ASTExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		FractalValue ilit = (FractalValue)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(ilit); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= factor 
            {
              ASTExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= term MOD factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
		RESULT = new ASTExpMod(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term DIV factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
		RESULT = new ASTExpDiv(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= term MUL factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
		RESULT = new ASTExpMul(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= term 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression MINUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
			RESULT = new ASTExpSub(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression PLUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
			RESULT = new ASTExpAdd(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expList ::= expression 
            {
              ArrayList<ASTExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 ArrayList<ASTExp> list = new ArrayList<ASTExp>();
	    		    list.add(e);
			    RESULT = list;
			 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expList ::= expList COMMA expression 
            {
              ArrayList<ASTExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ArrayList<ASTExp> l = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // frac_var ::= ID 
            {
              ASTFracVar RESULT =null;
		int fracleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fracright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String frac = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		RESULT = new ASTFracVar(frac); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("frac_var",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // turtleCmd ::= CLEAR 
            {
              ASTTurtleCmd RESULT =null;
		
	      		RESULT = new ASTTCmdClear();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // turtleCmd ::= HOME 
            {
              ASTTurtleCmd RESULT =null;
		
	      		RESULT = new ASTTCmdHome();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // turtleCmd ::= PENDOWN 
            {
              ASTTurtleCmd RESULT =null;
		
	      		RESULT = new ASTTCmdPenDown();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // turtleCmd ::= PENUP 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdPenUp();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // turtleCmd ::= BACK expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      		RESULT = new ASTTCmdBack(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // turtleCmd ::= FORWARD expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      	   RESULT = new ASTTCmdForward(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // turtleCmd ::= RIGHT expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      	   RESULT = new ASTTCmdRight(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // turtleCmd ::= LEFT expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      	   RESULT = new ASTTCmdLeft(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= REPEAT LBRACE ID RBRACE expression COLON stmtList END 
            {
              ASTStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence body = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTRepeat(v,n,body); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-7)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= RESTORE 
            {
              ASTStatement RESULT =null;
		 RESULT = new ASTRestoreStmt(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= SAVE 
            {
              ASTStatement RESULT =null;
		 RESULT = new ASTSaveStmt(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= SELF expression 
            {
              ASTStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTSelf(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= RENDER LBRACE factor RBRACE LPAREN factor RPAREN frac_var 
            {
              ASTStatement RESULT =null;
		int levelleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).right;
		ASTExp level = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp scale = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar f = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTRender(level,scale,f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-7)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= RENDER LPAREN factor RPAREN frac_var 
            {
              ASTStatement RESULT =null;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp scale = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar f = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTRender(null,scale,f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= RENDER LPAREN factor RPAREN fractal 
            {
              ASTStatement RESULT =null;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp scale = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal v = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTRender(null,scale,v); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= RENDER LBRACE factor RBRACE LPAREN factor RPAREN fractal 
            {
              ASTStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp r = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal fr = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		RESULT = new ASTRender(e,r,fr); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-7)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= turtleCmd 
            {
              ASTStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTurtleCmd c = (ASTTurtleCmd)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= DEF ID fractal 
            {
              ASTStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal fr = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDefine(d, fr);
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fractal ::= FRACTAL LPAREN number RPAREN stmtList END 
            {
              ASTFractal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).right;
		FractalValue n = (FractalValue)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence fr = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTFractal(fr.getSeq()); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractal",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              ASTStmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTStmtSequence(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              ASTStmtSequence RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence l = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = l.add(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTProgram start_val = (ASTProgram)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		RESULT = start_val;
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FractalParser$parser.done_parsing();
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ASTProgram RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtSequence l = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTProgram(l); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

